package jp.client.module.impl.exploit

import jp.client.event.LoadWorldEvent
import jp.client.event.MotionEvent
import jp.client.event.PacketEvent
import jp.client.event.TickEvent
import jp.client.event.annotations.SubscribeEvent
import jp.client.module.Module
import jp.client.module.setting.impl.ModeSetting
import net.minecraft.network.play.server.S08PacketPlayerPosLook

object Disabler : Module("Disabler", Category.EXPLOIT) {
    val mode = ModeSetting("Mode", this, "Watchdog", "Watchdog")
    var flagged = 0
    var isFinished = false
    var offGroundTicks = 0

    @SubscribeEvent
    fun onTick(e: TickEvent) {
        if (!mc.thePlayer.onGround)
            offGroundTicks++
        else offGroundTicks = 0
    }

    @SubscribeEvent
    fun onMotion(e: MotionEvent) {
        if (e.state == MotionEvent.State.POST || isFinished)
            return

        if (mc.thePlayer.onGround) {
            mc.thePlayer.jump()
        } else if (offGroundTicks >= 9) {
            if (offGroundTicks % 2 == 0) {
                e.posX += 0.095
            }

            mc.thePlayer.motionX = 0.0
            mc.thePlayer.motionY = 0.0
            mc.thePlayer.motionZ = 0.0
        }
    }

    @SubscribeEvent
    fun onPacket(e: PacketEvent) {
        if (e.state == PacketEvent.State.SEND)
            return

        val packet = e.packet
        if (packet is S08PacketPlayerPosLook && !isFinished) {
            flagged++
            if (flagged == 30) {
                isFinished = true
                flagged = 0
            }
        }
    }

    @SubscribeEvent
    fun onLoadWorld(e: LoadWorldEvent) {
        isFinished = false
        flagged = 0
    }
}